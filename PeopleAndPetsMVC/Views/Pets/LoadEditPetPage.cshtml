@model PeopleAndPetsAPI.Entities.PetViewModel

@{
    int ownerId = ViewData["OwnerId"] != null ? (int)ViewData["OwnerId"] : 0;
    string ownername = ViewData["OwnerName"] != null ? ViewData["OwnerName"].ToString() : string.Empty;

    bool editedSuccessfully = false;

    if (ViewData["EditedSuccessfully"] != null)
    {
        editedSuccessfully = true;
    }
}

<h1>Edit Pet</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        @using (Html.BeginForm("EditPet", "Pets", FormMethod.Post))
        {
            @Html.Hidden("OwnerName", ownername)
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
            <br />
            <div class="form-group">
                @Html.DropDownListFor(model => model.Type, new SelectList(new[] { "Dog", "Cat", "Parrot", "Hamster", "Goldfish" }), "Select Pet", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
            <br />
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.OwnerId)
            <div class="form-group">
                <input type="submit" value="Edit" class="btn btn-primary" />
            </div>
        }

        @if (editedSuccessfully)
        {
            <p>@ViewData["EditedSuccessfully"].ToString()</p>
        }
    </div>
</div>

<div>
    @Html.ActionLink("Back to the list of pets", "Index", "Pets", new { ownerId = ownerId, ownerName = ownername })
</div>